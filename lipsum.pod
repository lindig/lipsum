
# This is a Unix manual page for Lipsum in Perl POD format. It is
# translated into manual format using pod2perl which comes with a Perl
# installation. The POD format has some limitations but it is still one of
# the easier ways to write a manual page. I take the limitations (no
# tables, problems with escapes) in exchange for an easy way to update the
# manual page.
#

__END__

=head1 NAME

lipsum - a simple literate programming utility

=head1 SYNOPSIS

B<lipsum> B<tangle> [B<-f> I<fmt>] I<chunk> [I<file.lp>]

B<lipsum> B<expand> B<-f> I<fmt> I<glob> [I<file.lp>]

B<lipsum> B<tangle> B<-f>

B<lipsum> B<roots> [I<file.lp>]

B<lipsum> B<check> [I<file.lp>]

B<lipsum> B<chunks> [I<file.lp>]

B<lipsum> B<weave> [I<file.lp>]

B<lipsum> B<prepare> [I<file>]

B<lipsum> B<help>|B<-help>

B<lipsum> B<copyright>

=head1 DESCRIPTION

B<Lipsum> is a tool for literate programming in the tradition of NoWeb and
Sweave. A literate program is a file that contains both documentation and
source code which are separated by a lightweight markup. B<lipsum>'s primary
task is to extract the source from a literate program to make it
available for compilation and execution. This is traditionally called
I<tangling>. B<Lipsum> is language agnostic and can be used with almost any
programming language and documentation syntax.

=head1 COMMANDS

The first command line parameter identifies a command (like B<tangle> or
B<help>), which is followed by options, parameters, and file names.
A command that expects a named file for input will typically read input
from I<stdin> when no file name is given. Output of a command generally goes
to I<stdout>.

=over 4

=item B<tangle> [B<-f> I<fmt>] I<chunk> [I<file.lp>]

Extract I<chunk> from I<file.lp> and emit it to I<stdout>. Commands
B<chunks> and B<roots> list the available chunks. The extracted code
optionally includes references to  original source code locations in
I<file.lp>. For a list of available formats, use B<tangle -f>.

=item B<tangle> B<-f>

Emit the list of available source code position formats. The best known
format is C<cpp> as it is used by the C preprocessor cpp(1) and works for
many languages that use C<#> to start a comment.

=item B<expand> B<-f> I<fmt> I<glob> [I<file.lp>]

Extract each root code chunk matching shell pattern I<glob> to a file of
the same name using format I<fmt>. This is a quick way extract all code
chunks in one go into individual files. On the shell command line, you have
to quote the I<glob> pattern to avoid the shell expanding it:

    $ lipsum -f cpp '*.[ch]' file.lp

This will expand all chunks matching `*.c` or `*.h` using the cpp(1)
format for back references into F<file.lp>.    

Note that pattern C<*> does not match a C</> and hence C<*.c> does not
match C<a/b.c> but C<a/*.c> does.

=item B<roots> [I<file.lp>]

List the name of all root code chunks, one per line. A root chunk is
a chunk that is not part of another code chunk.

=item B<check> [I<file.lp>]

List code chunks that are referenced but not defined, one per line.

=item B<chunks> [I<file.lp>]

List the name of all code chunks, one per line.

=item B<weave> [I<file.lp>]

Emit I<file.lp>  with code chunks indented by 4 spaces. This makes the
output suitable for Markdown provided the documentation is already in
Markdown syntax.

=item B<prepare> [I<file>]

Read code in I<file> and add C<@> escapes where necessary to prepare the 
code to be used as a code chunk in a literate program. This helps moving
existing code into a literate program.

=item B<help> | B<-help>

Emits a short help message to I<stderr>. The help message includes a few 
additional commands that are not listed here because they are intended
for debugging.

=item B<copyright>

Emit the copyright notice and license to I<stdout>.

=back

=head1 FILE FORMAT

A literate program as it is understood by B<lipsum> is a sequence of
documentation and code chunks. Code chunks are named and may include
references to other code chunks. Command B<chunks> lists all available
chunks in a file.  Below is a simple example:

    Echo prints each command line argument on a line by itself. This 
    documentation chunk extends until the beginning of the named code
    chunk @<<echo.c>> below. Here I had to use @ to escape the meaning
    of @<< because otherwise it would have denoted a reference to a named 
    code chunk.

    <<echo.c>>=
    /* <<copyright>> */
    #include <stdio.h>

    int main(int argc, char** argv)
    {
            int i;
            for (i=0; i<argc; i++)
                    puts(argv[i]);
            return 0;
    }

    @ By keeping the copyright notice in a chunk by itself it is easy to
    include it in several files. A documenation starts with an @ followed
    by a space and extends until the beginning of the next chunk. Unless
    the @ is at the beginnung at the line it has no special meaning.

    <<copyright>>=
    This code is in the public domain.

Documentation is introduced by an C<@> at the beginning of a line, followed
by a space or a newline. Code chunks are named and introduced by C<<<> and
>>=. A name can span several words but must not include a newline. A
reference to a chunk is enclosed by C<<<> and C<>>>. A chunk extends until
the beginning of the next chunk or the end of input. The first chunk in
a file is by default a documentation chunk.

A code chunk can be extended:

    <<copyright>>=
    This code is part of the documentation for Lipsum
    
When the C<copyright> chunk is expanded, the two chunks are concatenated
and hence the copyright chunk expands to:

    /* This code is in the public domain.
    This code is part of the documentation for Lipsum. */

When a chunk is extracted with command B<expand> (traditionally called
tangling), the code is emitted to I<stdout> and all references are resolved
by emitting the referenced chunks during the process. A code chunk must not
include references to itself or any of the chunks where it is referenced.

=head1 QUOTING

Since a lipsum file uses @, <<, >>, and >>= for markup, a mechanism is
needed to include these in documentation and code chunks, as well as chunk
names. The general mechanism is to prefix strings with C<@> to escape their
meaning as markup.

To help with this when including existing source code into a literate
program, the B<prepare> command adds these escape sequences to input.

Below are situations where escaping is important.

=over 4

=item C<@> in code

The C<@> character only needs to be escaped when it is the first character
in a line. Escape it as C<@@>.

=item C<<< << >>> in code or documentation

Any occurrence of C<<<> in code or documentation that does not indicate a
named chunk needs to be escaped as C<@<<>.

=item C<@<<> in code

Escape C<@<<> as C<@@<<>.

=item C<@> in chunk names

Escape C<@> as C<@@>.

=item C<<< << >>>, and C<<< >>= >>> in chunk names

Escape any of the above strings by prefixing them with C<@>.

=item C<<< @<< >>>, C<<< @>> >>>, C<<< @>>= >>> in chunk names

Escape any of them by prefixing them with another C<@>.

=back

=head1 DIAGNOSTICS

=over 4

=item C<no such chunk>

The named chunk does not exist. Use commands B<roots> or B<chunks> to list 
existing chunks.

=item C<chunk is part of a cylcle>

A chunk must not include itself directly or indirectly as it would expand
to an infinite document. A chunk was found to violate this.

=item C<unexpeced newline in chunk name>

A chunk name must not contain a newline character. The error is most likely
caused by << inside code that looks to the scanner like the beginning of
a chunk name. Prefix it with @ like in @<< to escape it.

=item C<unexpeced end of file in chunk name>

The scanner encountered the end of input after reading << and assuming 
that this marks the beginning of a chunk name. Prefix it with @ 
like in  @<< to signal that it is not the beginning of a chunk name or 
close the chunk name properly with >> or >>=.

=back

=head1 UNICODE

Lipsum is not unicode aware but should work with UTF8 files regardless. If
you have suggestions how to make Lipsum unicode aware the author would be
interested to hear about them.

=head1 RETURN VALUES

The B<lipsum> utility returns 0 on success and a positive number if an
error occurs.

=head1 EXIT CODE

B<Lipusm> exits with 0 on success and a positive number otherwise.

=head1 SEE ALSO

notangle(1), cpp(1), http://daringfireball.net/projects/markdown/

=head1 AUTHOR

Written by Christian Lindig <lindig@gmail.com>. The source code available
from https://github.com/lindig/lipsum.git
    
=head1 LICENSE

See command B<copyright> for how to display the copyright notice and
license.
